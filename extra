HTML/HTML5 > Raw Structure
CSS/CSS3 > design (look & feel)
Bootstrap3/Bootstrap4/Bootstrap5 > responsive

///
vscode-icons
tabnine

JavaScript > Dynamic

NodeJS,Express,MongoDB,
ReactJs

https://code.visualstudio.com/download
https://github.com/
https://github.com/Aakashdeveloper
https://git-scm.com/downloads
https://www.postman.com/
https://dashboard.heroku.com/
https://chrome.google.com/webstore/detail/json-viewer/gbmdgpbipfallnflgajpaliibnhdgobh



head > use for providing link fo css javascript
body > all the things that is visual to the user 

inline > start in the same line (span, img, a)
block > start in the new line (h1,p,div)

Heading
link
image
description
skills/hobbies
map
footer

/////////////////
inline CSS >> css written inside html tag
StyleTag >>> css added in the header of page
StyleSheet >> separate Css File

inline > StyleTag > StyleSheet

h1

inline{
    color:red,
    font-size:30px; 
}

StyleTag{
    color:teal,
    font-size:40px;
    text-align:center
}

stylesheet{
    text-align:right;
    font-weight:bold
}

h1
{
    color:red,
    font-size:30px,
    text-align:center,
    font-weight:bold
}


display:inline-block should be should with same content
float left work with different amount of content also


styletags
> TagName > h1,a (if we target by tagname all that tag will get same property)
> Id (#)> to target something unique
> class (.)> to target multiple element

if we use 2 class than order of the class matter in css
the last which is on the bottom those property will be applied

if we have class and id then
all id property will be applied

https://git-scm.com/downloads

https://fontawesome.com/v5.15/icons?d=gallery&p=2&q=sw

Bootstrap3
Gird


//Bootstrap3
xs < 768px
sm > 768px
md > 992px
lg > 1200px

//Bootstrap4
col- <576px
sm> 576px
md>768px
lg>992px
xl>1200px

//bootstrap5
col- <576px
sm > 576px
md > 768px
lg > 992px
xl >1200px
xxl>1400px


12/6 = 2
12/4 = 3

GET
> Data Will be visible in the browser
> There is a limit to send data (2048 characters)

POST
> Data will not be visible in the browser
> There is no limit to send data

action> will be the url with help of which you will submit the records


weather app 
map/filter
function object
classes
prototype
clousour
hoisting
stockapp


https://chrome.google.com/webstore/detail/json-viewer/gbmdgpbipfallnflgajpaliibnhdgobh
https://nodejs.org/en/

/////dummyapi////
> open cmd
> go inside folder using cmd (cd Desktop/api/Nov/edu_intern_nov)
> npx json-server --watch bookmyshow.json --port 8700

https://www.linkedin.com/posts/aakansha-chouhan-091631215_intership-edureka-fullstackdevelopment-activity-6851196101681258496-_abB/
https://www.linkedin.com/feed/update/urn:li:activity:6850259520334118912/



http://localhost:8700/category
http://localhost:8700/data?category_id=2

https://github.com/Aakashdeveloper/public-apis


https://raw.githubusercontent.com/Aakashdeveloper/Aakashdeveloper/master/README.md
///////

nodejs
npm
nodeinbuilt
api in nodejs
restapi with db connection
login/logout

> https://dashboard.heroku.com/login > signup
> https://account.mongodb.com/account/login (login with google)
> https://www.mongodb.com/try/download/community?_ga=2.153137456.947270070.1642936106-1264525520.1602246073

nodejs > async single-threaded non-blocking i/o

nodejs => machine code

npm > node package manager
package.json
> Entry point in the app
> first file of the application
> contains start stop build command
> name of all the packages
> meta data(name , description, version)

//step to generate package.json
* nodejs must be installed
> go inside the folder using cmd/terminal
> npm init
> answer all questions
> type "yes"

//step to install package
> go inside the folder using cmd/terminal
> npm i packagename

/////////nodemon//////
# window
> open cmd as admin
> npm i -g nodemon

#mac/linux
> open terminal
> sudo npm i -g nodemon


get > Read
post > Create
put > Update
delete > Delete

CRUD
Create Read Update Delete


///
setup local mongodb
"port":27017
> Install mongodb

#window
> create folder name "data" in c drive
> inside "data" folder create folder "db"
> open first cmd 
    > c/program file/mongodb/4.5/server/bin
    > mongod 
    (this  will start the mongodb server)
> open second cmd
    > c/program file/mongodb/4.5/server/bin
    > mongo
    (this will start the mongo client)

#mac/linux
> open terminal
> mkdir data/db

> open first terminal
> mongodb --dbpath data/db

> open second terminal
> mongo

///////
params
> pass after /
> we need to define in routes
> complusory if you declare 

queryParams
> pass after ?
> no need to define in the route
> it is optional


npm i bcryptjs body-parser cors express jsonwebtoken mongoose

/////////////
/******GetAllUser*****/
(GET)> https://developerjwt.herokuapp.com/api/auth/users

/******Register*****/
(POST)> https://developerjwt.herokuapp.com/api/auth/register
(body) => {"name":"Aakash", "email":"aa@gmail.com","password":"12345678","phone":343432,role?":"user"}


/******Login*****/
(POST) => https://developerjwt.herokuapp.com/api/auth/login
(body)  => {"email":"aa@gmail.com","password":"12345678"}
(response)=> {auth:true,token:'dgsdg'}

/******UserInfo*****/
(GET) => https://developerjwt.herokuapp.com/api/auth/userinfo
(Header) => {'x-access-token':'token value from login'}

///////////Generate new react app ///////
> go inside the folder user cmd
> npx create-react-app appname

React > is a frontend lib/framework that help
to build single page application using component base structure

react > Main Library
React-dom > Help to render
React-Script > Help to run the app


function add(a,b){
    var out =  [a,b]
    return out
}

add(1,2)

classComponent
> logical component
> use for writing logic/api call as well as display
> can maintain state

functional Component
> dumb component
> use for display purpose
> we cannot maintain state

State
> State act like a local variable
> every data interaction will happen through state
> value of state can be update(mutable)

Props
> Help to share the data between the components
> value of props cannot be updated(immutable)
> data can be transfer between the two nested component

parent => children
props

children => parent
props with function


parent 
function add(a,b){
    return a+b
}

child
add(1,2)

/////////
npm i react-router-dom@5.3.0

//default props
> history > for redirection
> location > for query param
> match > for params

var a = [4,7,8,22,34,4]
undefined
a.splice(3,1)
[22]
a
(5) [4, 7, 8, 34, 4]
a.indexOf(8)
2
a.splice(a.indexOf(8),1)
[8]
a
(4) [4, 7, 34, 4]
a.splice(a.indexOf(4),1)
[4]
a.splice(a.indexOf(4),1)
[4]
a
(2) [7, 34]
a
(2) [7, 34]
a.splice(a.indexOf(4),1)
[34]

npm run build